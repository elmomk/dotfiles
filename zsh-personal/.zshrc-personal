# Add this line to .zshrc
# [[ -f ~/.zshrc-personal ]] && . ~/.zshrc-personal

export PATH=$PATH:$HOME/.cargo/bin:$HOME/go/bin:$HOME/bin:$HOME/stibbin:$HOME/work/experimentation/venv/bin

export TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache

export EDITOR='nvim'
export VISUAL='nvim'
export KUBE_EDITOR='nvim'

# reporting tools - install when not installed
if [[ ! $(env | grep tmux 2>&1) ]]; then
    ufetch-arco | lolcat
    # neofetch
fi

# unset some of arcolinux default aliases
unset PAGER
# eval some stuff
#thefuck for when you mess up
eval $(thefuck --alias)
eval "$(zoxide init zsh)"
eval "$(fnm env --use-on-cd)"
eval "$(direnv hook zsh)"
eval "$(starship init zsh)"

alias ls='exa --icons --color-scale -h'
alias ll='exa -l --icons --color-scale -h'
alias cat='bat'
alias diff='delta'

#terraform
alias tf='terraform'

#k8s
alias k='kubectl'
alias kctx='kubie ctx'
alias kns='kubie ns'
alias h='helm'

# lazygit
alias lg='lazygit'

#history
source /usr/share/doc/mcfly/mcfly.zsh
export MCFLY_FUZZY=2
export MCFLY_RESULTS=60
#export MCFLY_INTERFACE_VIEW=BOTTOM

alias zf='z `fd --type directory | fzf`'
alias fim='nvim `fzf -m --preview "bat --color=always {}"`'
alias rmf='rm `fzf -m --preview "bat --color=always {}"`'
alias wttr='echo "checking weather" && curl --connect-timeout 0.1 wttr.in/Tervuren'

alias tls='tmux list-sessions'
alias tfz='tmux attach -t `tmux list-sessions | fzf | cut -d: -f1`'

tnow () {
    tmux attach -t `tls | awk -F':' '{print $1}' | head -n1`
}

#wttr

alias vi="nvim"
alias v="nvim"
alias doco="docker-compose"



# fzf git
alias git-brach-fzf='git branch --sort=-committerdate | fzf --header "checkout recent branch" --preview "git diff --color=always {1}" | xargs git checkout'

# xinput set-prop "Kensington USB Orbit" "libinput Button Scrolling Button" 3

# my functions
# distrobox

enter () {
    if [[ $(distrobox list |grep $(date +%Y%m) 2> /dev/null) ]];
    then
        DISTROBOX=$(distrobox list|grep $(date +%Y%m) 2> /dev/null | awk '{print $3}')
        echo "entering distrobox $DISTROBOX"
        distrobox enter "$DISTROBOX"
    else
        echo "create a new monthly toolbox"
        newdistro
        enter
    fi
}


# worktrees
bra () {
    BRANCH=$(git worktree list | awk '{print $1}' | fzf --cycle --preview 'cd {1}; git show --color=always')
    echo "Branch: $BRANCH"
    # TODO: fix when root of repo is selected
    # if BRANCH is not empty, cd to DESTINATION
    if [[ -n "$BRANCH" ]]; then
        RELATIVE_PATH=$(realpath --relative-to=${BRANCH} ${PWD} | cut -f 3- -d '/')
        echo "Relative path: $RELATIVE_PATH"
        # if relative path equals .. then DESTINATION is BRANCH else DESTINATION is BRANCH/RELATIVE_PATH
        if [[ "$RELATIVE_PATH" == ".." ]]; then
            DESTINATION=${BRANCH}
        else
            DESTINATION=${BRANCH}/${RELATIVE_PATH}
        fi
        # DESTINATION=${BRANCH}/${RELATIVE_PATH}
        echo "cd $DESTINATION"
        cd ${DESTINATION}
    else
        echo "No branch selected"
    fi
    # cd ${DESTINATION}
}

worktree () {
    BRANCH=$1
    if [ -z "$BRANCH" ]; then
        echo "Usage: worktree.sh <branch>"
        echo "Example: worktree.sh master"
        echo "this will create a new branch called master"
        echo "and create a new worktree for it"
    fi
    BRANCH_PATH=$(echo "$BRANCH" | tr '/' _)
    echo "Branch path: $BRANCH_PATH"

    if [ -d "$BRANCH_PATH" ]; then
        echo "Branch $BRANCH already exists"
    fi

    echo "git worktree add -b $BRANCH $BRANCH_PATH"
    git worktree add -b "$BRANCH" "$BRANCH_PATH"

    cd "$BRANCH_PATH" || echo "Could not cd to $BRANCH_PATH"
}

lnconfig () {
    echo "ln -s $HOME/work/dcp/config $PWD/dcp-config"
    echo "cp $HOME/.runcli/config $PWD/.runrsenv"
    echo "current status: "
    /usr/bin/ls -halt | grep -E "dcp-config|runrsenv"
    "Are you sure? [y/N] "
    read -r  response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        ln -s $HOME/work/dcp/config $PWD/dcp-config
        cp $HOME/.runcli/config $PWD/.runrsenv
        vi $PWD/.runrsenv
    else
        echo "Aborted"
    fi
}

admcheck () {
    az account show | grep adm || az login
}

alias nvim-lazy="NVIM_APPNAME=LazyVim nvim"
alias nvim-kick="NVIM_APPNAME=kickstart nvim"
alias nvim-chad="NVIM_APPNAME=NvChad nvim"
alias nvim-astro="NVIM_APPNAME=AstroNvim nvim"

nvims() {
  items=("default" "kickstart" "LazyVim" "NvChad" "AstroNvim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}

# bindkey -s ^a "nvims\n"
eval "$(github-copilot-cli alias -- "$0")"
